{"version":3,"sources":["logo.svg","components/text.js","components/dropdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Text","props","react_default","a","createElement","exports_Text","Object","assign","style","fontSize","color","Dropdown","View","components_text","title","Picker","R","item","Item","key","label","value","items","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","versions","fromVersion","toVersion","_this2","fetch","then","r","text","versionsText","setState","_this3","className","src","logo","alt","react_github_btn","href","data-icon","data-size","data-show-count","aria-label","flexDirection","dropdown","onValueChange","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qSCczBC,EAVF,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,CACAC,MAAO,CACLC,SAAU,qBACVC,MAAO,UAEHT,qBCUOU,EAbE,SAACV,GAChB,OACEC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAD,KAAOZ,EAAMa,OACbZ,EAAAC,EAAAC,cAACW,EAAA,EAAWd,EACTe,IAAM,SAAAC,GAAI,OACTf,EAAAC,EAAAC,cAACW,EAAA,EAAOG,KAAR,CAAaC,IAAKF,EAAMG,MAAOH,EAAMI,MAAOJ,KAD7CD,CAEEf,EAAMqB,UCmDFC,qBApDb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAAoB,KAAAH,IACjBC,EAAAlB,OAAAqB,EAAA,EAAArB,CAAAoB,KAAApB,OAAAsB,EAAA,EAAAtB,CAAAiB,GAAAM,KAAAH,KAAMzB,KAED6B,MAAQ,CACXC,SAAU,GACVC,YAAa,GACbC,UAAW,IANIT,mFAUC,IAAAU,EAAAR,KAClBS,MAAM,0EACHC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GACJ,IAAMR,EAAWf,IAAQ,KAARA,CAAcuB,GAC/BL,EAAKM,SAAS,CACZT,WACAC,YAAaD,EAAS,GACtBE,UAAWF,EAAS,wCAKnB,IAAAU,EAAAf,KACP,OACExB,EAAAC,EAAAC,cAAA,OAAKsC,UAAU,OACbxC,EAAAC,EAAAC,cAAA,UAAQsC,UAAU,cAChBxC,EAAAC,EAAAC,cAACS,EAAD,sBACAX,EAAAC,EAAAC,cAAA,OAAKuC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAcC,KAAK,0CAA0CC,YAAU,eAAeC,YAAU,QAAQC,kBAAgB,OAAOC,aAAW,uCAA1I,QACAjD,EAAAC,EAAAC,cAACS,EAAD,kBACAX,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMJ,MAAO,CAAE4C,cAAe,QAC5BlD,EAAAC,EAAAC,cAACiD,EAAD,CACEvC,MAAM,OACNQ,MAAOI,KAAKI,MAAMC,SAClBuB,cAAe,SAAAtB,GAAW,OAAIS,EAAKD,SAAS,CAAER,mBAEhD9B,EAAAC,EAAAC,cAACiD,EAAD,CACEvC,MAAM,KACNQ,MAAOI,KAAKI,MAAMC,SAClBuB,cAAe,SAAArB,GAAS,OAAIQ,EAAKD,SAAS,CAAEP,iBAE9C/B,EAAAC,EAAAC,cAAA,KAAG2C,KAAI,2DAAAQ,OAA6D7B,KAAKI,MAAME,YAAxE,cAAAuB,OAAgG7B,KAAKI,MAAMG,YAChH/B,EAAAC,EAAAC,cAACS,EAAD,6BA5CI2C,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.d9237291.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { Text as RText } from 'react-native-web'\n\n\nconst Text = (props) => (\n  <RText\n  style={{\n    fontSize: 'calc(10px + 2vmin)',\n    color: 'white',\n  }}\n    {...props}\n  />\n)\n\nexport default Text\n","import React from 'react'\nimport { Picker, View } from 'react-native-web'\nimport * as R from 'ramda'\n\nimport { Text } from '.'\n\n\nconst Dropdown = (props) => {\n  return (\n    <View>\n      <Text>{props.title}</Text>\n      <Picker {...props}>\n        {R.map(item => (\n          <Picker.Item key={item} label={item} value={item} />\n        ))(props.items)}\n      </Picker>\n    </View>\n  )\n}\n\nexport default Dropdown\n","import React, { Component } from 'react';\nimport { View } from 'react-native-web'\nimport * as R from 'ramda'\nimport GitHubButton from 'react-github-btn'\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Text, Dropdown } from './components'\nimport { version } from 'punycode';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      versions: [],\n      fromVersion: '',\n      toVersion: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/pvinis/rn-diff-purge/master/VERSIONS')\n      .then(r => r.text())\n      .then(versionsText => {\n        const versions = R.split('\\n')(versionsText)\n        this.setState({\n          versions,\n          fromVersion: versions[0],\n          toVersion: versions[0],\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Text>RN diff PURGE</Text>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <GitHubButton href=\"https://github.com/pvinis/rn-diff-purge\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star pvinis/rn-diff-purge on GitHub\">Star</GitHubButton>\n          <Text>Get diff:</Text>\n          <View style={{ flexDirection: 'row' }}>\n            <Dropdown\n              title='From'\n              items={this.state.versions}\n              onValueChange={fromVersion => this.setState({ fromVersion })}\n            />\n            <Dropdown\n              title='To'\n              items={this.state.versions}\n              onValueChange={toVersion => this.setState({ toVersion })}\n            />\n            <a href={`https://github.com/pvinis/rn-diff-purge/compare/version/${this.state.fromVersion}..version/${this.state.toVersion}`}>\n              <Text>Diff here</Text>\n            </a>\n          </View>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}