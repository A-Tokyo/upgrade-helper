{"version":3,"sources":["logo.svg","components/text.js","components/dropdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Text","props","react_default","a","createElement","exports_Text","Object","assign","style","fontSize","color","Dropdown","View","components_text","title","Picker","R","item","Item","label","value","items","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","versions","_this2","fetch","then","r","text","setState","className","src","logo","alt","flexDirection","dropdown","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qRCczBC,SAVF,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,CACAC,MAAO,CACLC,SAAU,qBACVC,MAAO,UAEHT,sBCUOU,EAbE,SAACV,GAChB,OACEC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAD,KAAOZ,EAAMa,OACbZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACGC,IAAM,SAAAC,GAAI,OACTf,EAAAC,EAAAC,cAACW,EAAA,EAAOG,KAAR,CAAaC,MAAOF,EAAMG,MAAOH,KADlCD,CAEEf,EAAMoB,UC6CFC,qBA/Cb,SAAAA,EAAYrB,GAAO,IAAAsB,EAAA,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAAmB,KAAAH,IACjBC,EAAAjB,OAAAoB,EAAA,EAAApB,CAAAmB,KAAAnB,OAAAqB,EAAA,EAAArB,CAAAgB,GAAAM,KAAAH,KAAMxB,KAED4B,MAAQ,CACXC,SAAU,IAJKP,mFAQC,IAAAQ,EAAAN,KAClBO,MAAM,0EACHC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAH,GAAQ,OAAIC,EAAKK,SAAS,CAAEN,SAAUd,IAAQ,KAARA,CAAcc,wCAI5D,OACE5B,EAAAC,EAAAC,cAAA,OAAKiC,UAAU,OACbnC,EAAAC,EAAAC,cAAA,UAAQiC,UAAU,cAChBnC,EAAAC,EAAAC,cAAA,OAAKkC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCtC,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,kBACAH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMJ,MAAO,CAAEiC,cAAe,QAC5BvC,EAAAC,EAAAC,cAACsC,EAAD,CACE5B,MAAM,OACNO,MAAOI,KAAKI,MAAMC,WAEpB5B,EAAAC,EAAAC,cAACsC,EAAD,CACE5B,MAAM,KACNO,MAAOI,KAAKI,MAAMC,YAGtB5B,EAAAC,EAAAC,cAAA,KACEiC,UAAU,WACVM,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,0BAlCQC,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.7718ddbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { Text as RText } from 'react-native-web'\n\n\nconst Text = (props) => (\n  <RText\n  style={{\n    fontSize: 'calc(10px + 2vmin)',\n    color: 'white',\n  }}\n    {...props}\n  />\n)\n\nexport default Text\n","import React from 'react'\nimport { Picker, View } from 'react-native-web'\nimport * as R from 'ramda'\n\nimport { Text } from '.'\n\n\nconst Dropdown = (props) => {\n  return (\n    <View>\n      <Text>{props.title}</Text>\n      <Picker>\n        {R.map(item => (\n          <Picker.Item label={item} value={item} />\n        ))(props.items)}\n      </Picker>\n    </View>\n  )\n}\n\nexport default Dropdown\n","import React, { Component } from 'react';\nimport { Text, View } from 'react-native-web'\nimport * as R from 'ramda'\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Dropdown } from './components'\nimport { version } from 'punycode';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      versions: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/pvinis/rn-diff-purge/master/VERSIONS')\n      .then(r => r.text())\n      .then(versions => this.setState({ versions: R.split('\\n')(versions) }))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <Text>Get diff:</Text>\n          <View style={{ flexDirection: 'row' }}>\n            <Dropdown\n              title='From'\n              items={this.state.versions}\n            />\n            <Dropdown\n              title='To'\n              items={this.state.versions}\n            />\n          </View>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn Reactaa\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}